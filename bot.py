import asyncio
import json
import logging
import os
import re
import sys
import traceback
from datetime import datetime, timedelta

import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from decouple import config
from dotenv import load_dotenv
from pyrogram import Client, filters, idle
from pyrogram.handlers import MessageHandler

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = config("BOT_TOKEN")
ADMINS = config('ADMINS').split(',')
ACCESS_CODE = config('ACCESS_CODE')
ACCESS_FILE = "authorized_users.json"

# defining the timezone
tz = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.WARNING, stream=sys.stdout)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_authorized_users():
    try:
        with open(ACCESS_FILE, "r") as file:
            return set(json.load(file))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()


# –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = load_authorized_users()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_authorized_users(users):
    with open(ACCESS_FILE, "w") as file:
        json.dump(list(users), file)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_code = State()
    waiting_for_chat_id = State()
    waiting_for_report_type = State()
    waiting_for_access_code = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Pyrogram
pyrogram_clients = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
client_temp_data = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
def load_accounts():
    try:
        with open('accounts.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_accounts(accounts):
    with open('accounts.json', 'w', encoding='utf-8') as f:
        json.dump(accounts, f, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫
def load_orders():
    try:
        with open('orders.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
def save_orders(orders):
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ Pyrogram
async def init_account(phone, data, again=False):
    await disable_active_account(phone)
    try:
        async with Client(
                f"session_{phone}",
                api_id=data['api_id'],
                api_hash=data['api_hash'],
                phone_number=phone
        ) as client:
            pyrogram_clients[phone] = client
            print(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.phone_number}")
            client.add_handler(MessageHandler(handle_message, filters.text & ~filters.me))
            await idle()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
        traceback.print_exc()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ AUTH_KEY_UNREGISTERED
        if "[401 AUTH_KEY_UNREGISTERED]" in str(e):
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            try:
                session_file = f"session_{phone}.session"
                os.remove(session_file)
                print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            except FileNotFoundError:
                print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await disable_active_account(phone)

            accounts = load_accounts()
            if phone in accounts:
                del accounts[phone]
                save_accounts(accounts)

            await wakeup_admins(
                f"–ê–∫–∫–∞—É–Ω—Ç {phone} –æ—Ç–∫–ª—é—á—ë–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ [401 AUTH_KEY_UNREGISTERED]. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ Pyrogram
async def disconnect_account(phone, data):
    try:
        async with Client(
                f"session_{phone}",
                api_id=data['api_id'],
                api_hash=data['api_hash'],
                phone_number=phone
        ) as client:
            client.disconnect()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {phone}: {str(e)}")
        traceback.print_exc()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
async def is_user_authorized(client):
    try:
        await client.get_me()
        return True
    except Exception as e:
        return False


# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def wakeup_admins(message):
    for admin in ADMINS:
        try:
            await bot.send_message(chat_id=admin, text=message)
        except Exception:
            traceback.print_exc()


# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
async def disable_active_account(phone):
    if phone in pyrogram_clients:
        try:
            await pyrogram_clients[phone].stop()
        except ConnectionError as e:
            if "Client is already terminated" in str(e):
                pass
            else:
                traceback.print_exc()
                await wakeup_admins(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ({phone})")

        try:
            await pyrogram_clients[phone].disconnect()
        except ConnectionError as e:
            if "Client is already disconnected" in str(e):
                pass
            else:
                traceback.print_exc()
                await wakeup_admins(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ({phone})")
        del pyrogram_clients[phone]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@dp.message(UserStates.waiting_for_access_code)
async def process_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == ACCESS_CODE:
        authorized_users.add(user_id)
        save_authorized_users(authorized_users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞.")
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    commands_text = """
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—è–≤–æ–∫. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

/accounts - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã  
/add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/remove_account - –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_account
"""
    await message.answer(commands_text)


def get_cancel_keyboard():
    return InlineKeyboardBuilder([[InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å üö´', callback_data="cancel")]]).as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(Command("add_account"))
async def cmd_add_account(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:", reply_markup=get_cancel_keyboard())
        await state.set_state(UserStates.waiting_for_access_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        return
    await state.set_state(UserStates.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω Telegram –∞–∫–∫–∞—É–Ω—Ç:",
                         reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(UserStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    client_temp_data[phone] = {}
    await state.update_data(phone=phone)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API ID
    await state.set_state(UserStates.waiting_for_api_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ API ID (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org):",
                         reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API ID
@dp.message(UserStates.waiting_for_api_id)
async def process_api_id(message: Message, state: FSMContext):
    try:
        api_id = int(message.text.strip())
        data = await state.get_data()
        phone = data['phone']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API ID –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        client_temp_data[phone]['api_id'] = api_id
        await state.update_data(api_id=api_id)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API Hash
        await state.set_state(UserStates.waiting_for_api_hash)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ API Hash (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org):",
                             reply_markup=get_cancel_keyboard())
    except ValueError:
        await message.answer("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=get_cancel_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API Hash
@dp.message(UserStates.waiting_for_api_hash)
async def process_api_hash(message: Message, state: FSMContext):
    api_hash = message.text.strip()
    data = await state.get_data()
    phone = data['phone']
    api_id = data['api_id']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API Hash –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    client_temp_data[phone]['api_hash'] = api_hash

    await message.answer("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...")

    try:
        client = Client(
            f"session_{phone}",
            api_id=api_id,
            api_hash=api_hash,
            phone_number=phone
        )
        await client.connect()

        if not await is_user_authorized(client):
            try:
                sent_code = await client.send_code(phone)
            except Exception as e:
                if '[406 PHONE_NUMBER_INVALID]' in str(e):
                    await bot.send_message(message.from_user.id,
                                           "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    await state.clear()
                else:
                    await bot.send_message(message.from_user.id,
                                           "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    await state.clear()
                return
            await state.update_data(client=client, sent_code=sent_code)
            await state.set_state(UserStates.waiting_for_code)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard())
        else:
            pyrogram_clients[phone] = client
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            accounts = load_accounts()
            data = {
                "api_id": api_id,
                "api_hash": api_hash,
                "added_at": datetime.now().strftime("%Y.%m.%d %H:%M:%S")
            }
            accounts[phone] = data
            save_accounts(accounts)
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if phone in client_temp_data:
                del client_temp_data[phone]
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            await state.clear()
            await asyncio.create_task(init_account(phone, data))


    except Exception as e:
        traceback.print_exc()
        await wakeup_admins("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API Hash)")
        if phone in client_temp_data:
            del client_temp_data[phone]
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(UserStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    code = message.text.strip()
    data = await state.get_data()
    phone = data['phone']

    try:
        await data['client'].sign_in(
            phone_number=phone,
            phone_code_hash=data['sent_code'].phone_code_hash,
            phone_code=code
        )
        client = data['client']
        pyrogram_clients[phone] = client

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        accounts = load_accounts()
        data = {
            "api_id": client_temp_data[phone]['api_id'],
            "api_hash": client_temp_data[phone]['api_hash'],
            "added_at": datetime.now().strftime("%Y.%m.%d %H:%M:%S")
        }
        accounts[phone] = data
        save_accounts(accounts)

        await client.disconnect()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if phone in client_temp_data:
            del client_temp_data[phone]

        await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()

        await asyncio.create_task(init_account(phone, data))

    except Exception as e:
        traceback.print_exc()

        if 'The confirmation code is invalid' in str(e):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard())
            return
        await wakeup_admins("–û—à–∏–±–∫–∞ –≤ –æ—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        if phone in client_temp_data:
            del client_temp_data[phone]

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(Command("accounts"))
async def cmd_get_accounts(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:", reply_markup=get_cancel_keyboard())
        await state.set_state(UserStates.waiting_for_access_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        return
    accounts = load_accounts()
    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    n = '\n'
    text = f"""–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:
<blockquote>
{n.join(['‚Ä¢ ' + str(phone) for phone in list(accounts.keys())])}
</blockquote>"""
    await message.answer(text, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(Command("remove_account"))
async def cmd_remove_account(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:", reply_markup=get_cancel_keyboard())
        await state.set_state(UserStates.waiting_for_access_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        return
    accounts = load_accounts()
    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=phone)] for phone in accounts],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(lambda message: message.text in load_accounts())
async def process_remove_account(message: Message):
    phone = message.text
    accounts = load_accounts()

    if phone in accounts:
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        await disable_active_account(phone)

        # –£–¥–∞–ª—è–µ–º –∏–∑ accounts.json
        del accounts[phone]
        save_accounts(accounts)

        await message.answer(
            f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )


    else:
        await message.answer(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def parse_order_message(text):
    city_match = re.search(r'‚Ä¢\s*(.*?):', text)
    address_match = re.search(r'–ê–¥—Ä–µ—Å:\s*üëâ\s*(.*?)(?=\n|$)', text)
    count_match = re.search(r'–ù—É–∂–µ–Ω\s*(\d+)/(\d+)', text)
    payment_match = re.search(r'–û–ø–ª–∞—Ç–∞:\s*(\d+)\s*‚ÇΩ/—á–∞—Å', text)

    if not all([city_match, address_match, count_match, payment_match]):
        return None

    return {
        'city': city_match.group(1).strip(),
        'address': address_match.group(1).strip(),
        'body_count': int(count_match.group(2)),
        'paid_amount': int(payment_match.group(1)),
        'datetime': datetime.now().strftime("%Y.%m.%d %H:%M:%S")
    }


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
@dp.callback_query(F.data == 'cancel')
async def handle_cancel_order(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    msg = await bot.send_message(call.message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # time.sleep(5)
    # await bot.delete_message(call.message.chat.id, msg.message_id)


async def handle_message(client: Client, message: Message):
    if message.text:
        parsed_data = parse_order_message(message.text)
        if parsed_data:
            orders = load_orders()
            chat_id = str(message.from_user.id)

            if chat_id not in orders:
                chat_name = message.chat.title if message.chat.title is not None else f'{message.chat.first_name} {message.chat.last_name}'
                orders[chat_id] = {}
                orders[chat_id]['streets'] = {}
                orders[chat_id]['chat_name'] = chat_name

            if parsed_data['city'] not in orders[chat_id]['streets']:
                orders[chat_id]['streets'][parsed_data['city']] = {}

            orders_in_address = orders[chat_id]['streets'][parsed_data['city']].get(parsed_data['address'], [])

            orders_in_address.append({
                'body_count': parsed_data['body_count'],
                'paid_amount': parsed_data['paid_amount'],
                'datetime': parsed_data['datetime']
            })

            orders[chat_id]['streets'][parsed_data['city']][parsed_data['address']] = orders_in_address

            save_orders(orders)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {parsed_data}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def process_data(data, start_date, end_date):
    report = {
        'summ_unique_requests_count': 0
    }
    for city, addresses in data.items():
        body_in_address = {}  # –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –≤ –∑–∞—è–≤–∫–∞—Ö
        city_report = {
            "unique_requests_by_price": {},
            "address_with_people": {},
        }
        report['summ_unique_requests_count'] += len(addresses)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –ø–æ —Ü–µ–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–ª–æ–≤–µ–∫
        duplicate_dates = {}
        for address, orders in addresses.items():
            max_paid = 0
            for order in orders:
                order_date = datetime.strptime(order["datetime"], "%Y.%m.%d %H:%M:%S")
                if start_date <= order_date <= end_date:

                    duplicate_key = f"{order['paid_amount']}_{order['body_count']}"
                    if duplicate_key in duplicate_dates.keys():
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                        difference = abs(order_date - duplicate_dates[duplicate_key])
                        if difference > timedelta(hours=2):
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
                            duplicate_dates[duplicate_key] = order_date
                        else:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑ –¥—É–±–ª–∏–∫–∞—Ç
                            continue
                    else:
                        duplicate_dates[duplicate_key] = order_date

                    if address not in body_in_address:
                        body_in_address[address] = [order['body_count']]
                    else:
                        body_in_address[address].append(order["body_count"])
                    # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –ø–æ –∑–∞—è–≤–∫–∞–º
                    max_paid = max(max_paid, order["paid_amount"])

            if max_paid in city_report['unique_requests_by_price']:
                city_report['unique_requests_by_price'][max_paid] += 1
            else:
                city_report['unique_requests_by_price'][max_paid] = 1

        # —Å—á–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å –∫–æ–ª-–≤–æ–º –∑–∞—è–≤–æ–∫ >= 8 –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        add_counter = 0
        max_bodies_in_adress = 0
        for address, body_list in body_in_address.items():
            mx_body_count = max(body_list)

            our_buddies = 0
            for b in body_list:
                if b >= 8:
                    our_buddies += b
                elif b == mx_body_count:
                    our_buddies += b

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç—á–µ—Ç –≤—Å–µ—Ö > 8 –ª–∏–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–≤–æ
            if our_buddies > 8:
                add_counter += 1
            max_bodies_in_adress = max(max_bodies_in_adress, our_buddies)

            city_report['address_with_people'][address] = our_buddies

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keys_to_remove = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º
        for address, buddies in city_report['address_with_people'].items():
            if add_counter > 0 and buddies < 8:
                keys_to_remove.append(address)
            elif add_counter == 0 and buddies != max_bodies_in_adress:
                keys_to_remove.append(address)

        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for key in keys_to_remove:
            del city_report['address_with_people'][key]

        sorted_address_with_people = dict(
            sorted(city_report['address_with_people'].items(), key=lambda item: item[1], reverse=True))
        city_report['address_with_people'] = sorted_address_with_people
        report[city] = city_report

    return report


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
def generate_report(report):
    report_lines = []
    for city, info in report.items():
        if city == 'summ_unique_requests_count':
            continue
        report_lines.append(city)
        for price, count in info["unique_requests_by_price"].items():
            report_lines.append(f" - {price} —Ä/—á–∞—Å ({count} –∑–∞—è–≤–æ–∫)")
        for address, people in info["address_with_people"].items():
            report_lines.append(f"–ê–¥—Ä–µ—Å: {address} ({people} —á–µ–ª–æ–≤–µ–∫)")
        report_lines.append("")
    report_lines.append(f"–û–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫ ({report['summ_unique_requests_count']})")
    return "\n".join(report_lines)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —á–∞—Ç–æ–≤
def get_chat_titles():
    return [item['chat_name'] for _, item in load_orders().items()]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@dp.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in authorized_users:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:", reply_markup=get_cancel_keyboard())
        await state.set_state(UserStates.waiting_for_access_code)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        return
    chats = get_chat_titles()
    if len(chats) == 0:
        await message.answer("–û—Ç—á—ë—Ç –ø—É—Å—Ç.")

        return
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=chat_id)] for chat_id in chats],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:", reply_markup=keyboard)
    await state.set_state(UserStates.waiting_for_chat_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
@dp.message(UserStates.waiting_for_chat_id)
async def process_chat_id(message: Message, state: FSMContext):
    try:
        chat_name = message.text.strip()

        if chat_name not in get_chat_titles():
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        await state.set_state(UserStates.waiting_for_report_type)
        await state.update_data(choosed_chat_name=chat_name)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")],
                      [types.KeyboardButton(text="–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=keyboard)
    except ValueError:
        await message.answer("Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
@dp.message(UserStates.waiting_for_report_type)
async def process_chat_id(message: Message, state: FSMContext):
    try:
        report_type = message.text.strip()

        if report_type not in ["–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

        if report_type == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞":
            report_type = "day"
        elif report_type == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
            report_type = "week"

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –æ—Ç—á—ë—Ç–∞
        data = await state.get_data()

        await bot.send_message(chat_id=message.from_user.id,
                               text=get_report(report_type, chat_name=data["choosed_chat_name"]))
        await state.set_state(UserStates.waiting_for_report_type)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
def get_report(report_type: str, chat_name):
    for key, item in load_orders().items():
        if item['chat_name'] == chat_name:
            chat_id = key
            break
    else:
        return "–û—Ç—á—ë—Ç –ø—É—Å—Ç"
    data = load_orders().get(chat_id, {}).get("streets", {})
    now = datetime.now()
    if report_type == "day":
        start_date = now - timedelta(days=1)
    elif report_type == "week":
        start_date = now - timedelta(weeks=1)
    else:
        return "–û—Ç—á—ë—Ç –ø—É—Å—Ç"
    end_date = now
    report = process_data(data, start_date, end_date)
    print(report)
    report_text = generate_report(report)
    if report_text == "":
        return "–û—Ç—á—ë—Ç –ø—É—Å—Ç"
    return report_text


# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async def monitor_clients():
    while True:
        for phone, client in list(pyrogram_clients.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                is_authorized = await is_user_authorized(client)
                if not is_authorized:
                    await wakeup_admins(f"–ê–∫–∫–∞—É–Ω—Ç {phone} –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")

                    accounts = load_accounts()
                    if phone in accounts:
                        del accounts[phone]
                        save_accounts(accounts)

                    await disable_active_account(phone)
            except Exception as e:
                traceback.print_exc()
                await wakeup_admins(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}: {str(e)}")
                await disable_active_account(phone)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        accounts = load_accounts()
        pyrogram_tasks = []
        for phone, data in accounts.items():
            pyrogram_tasks.append(init_account(phone, data))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        monitor_task = asyncio.create_task(monitor_clients())

        aiogram_task = dp.start_polling(bot)
        await asyncio.gather(*pyrogram_tasks, monitor_task, aiogram_task)
    except Exception:
        traceback.print_exc()

    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        for client in pyrogram_clients.values():
            await client.disconnect()


if __name__ == "__main__":
    asyncio.run(main())
